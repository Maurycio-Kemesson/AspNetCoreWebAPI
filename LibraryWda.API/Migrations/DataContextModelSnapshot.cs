// <auto-generated />
using LibraryWda.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LibraryWda.API.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0");

            modelBuilder.Entity("LibraryWda.API.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PublishingCompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PublishingCompanyId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PublishingCompanyId = 1,
                            Title = "A culpa é das estrelas"
                        },
                        new
                        {
                            Id = 2,
                            PublishingCompanyId = 1,
                            Title = "Quem é você alasca"
                        },
                        new
                        {
                            Id = 3,
                            PublishingCompanyId = 1,
                            Title = "A dois passos de você"
                        });
                });

            modelBuilder.Entity("LibraryWda.API.Models.BookLoan", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.HasKey("StudentId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookLoans");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            BookId = 1
                        },
                        new
                        {
                            StudentId = 2,
                            BookId = 2
                        },
                        new
                        {
                            StudentId = 3,
                            BookId = 3
                        });
                });

            modelBuilder.Entity("LibraryWda.API.Models.PublishingCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PublishingCompanys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Interseca"
                        });
                });

            modelBuilder.Entity("LibraryWda.API.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .HasColumnType("TEXT");

                    b.Property<string>("Telephone")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Rua A",
                            Name = "Maurycio",
                            Surname = "Kemesson",
                            Telephone = "33225555"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Rua A",
                            Name = "Valdeli",
                            Surname = "Nascimento",
                            Telephone = "3354288"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Rua A",
                            Name = "Rafael",
                            Surname = "Araujo",
                            Telephone = "55668899"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Rua A",
                            Name = "Lucas",
                            Surname = "Unifametro",
                            Telephone = "6565659"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Rua A",
                            Name = "Rhaun",
                            Surname = "Junior",
                            Telephone = "565685415"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Rua A",
                            Name = "Caio",
                            Surname = "Alvares",
                            Telephone = "456454545"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Rua A",
                            Name = "Pedro",
                            Surname = "Lucas",
                            Telephone = "9874512"
                        });
                });

            modelBuilder.Entity("LibraryWda.API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "maurycio.kemesson@gmail.com",
                            Name = "Maurycio Kemesson",
                            Password = "Qwe123*"
                        });
                });

            modelBuilder.Entity("LibraryWda.API.Models.Book", b =>
                {
                    b.HasOne("LibraryWda.API.Models.PublishingCompany", "PublishingCompany")
                        .WithMany()
                        .HasForeignKey("PublishingCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryWda.API.Models.BookLoan", b =>
                {
                    b.HasOne("LibraryWda.API.Models.Book", "Book")
                        .WithMany("BooksLoans")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryWda.API.Models.Student", "Student")
                        .WithMany("BooksLoans")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
